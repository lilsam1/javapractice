package ch_15_design_pattern;

public class Design_pattern {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		/* 디자인 패턴
		유연하고 재활용성 높은 프로그램을 만들기 위한 설계 유형을 이론화 및 정리한 내용
			-> 프로그램의 유지보수 확장을 위함
			
		1.싱글턴 패턴
			객체지향 프로그램에서 인스턴스를 하나만 생성하는 디자인 패턴
		
		2.어댑터 패턴
			호출당하는 쪽의 메서드를 호출하는 족의 코드에 대응하도록 중간에 변환기를 통해 호출하는 패턴
			
		3. MVC 패턴 
			어느 정도 규모가 있는 프로그램을 만들 때 프로그램을 독립적인 모듈로 나누고 이 모듈들을 느슨하게 연결하는 구조화 작업을 병행해야 함
			  -> 1) 작업시 분담이 편하고 2) 만들어놓고 수정을 할 때 해당되는 기능의 부분만으로 수정을 최소화 할 수 있음 
			
			프로그램을 Model - View - Controller 의 세 부분으로 나누어 만듬
			
			Model : 응용 프로그램의 데이터나 데이터를 처리하는 영역을 의미
			View : 결과 화면을 만들어내는데 사용하는 자원을 의미
			Controller : 사용자로부터 입력받은 데이터를 전달받고 모델 계층과 연동해 필요한 데이터를 처리하고 결과를 뷰로 전송
			
		 */


	}

}
