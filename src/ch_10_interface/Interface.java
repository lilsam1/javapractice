package ch_10_interface;

public class Interface {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		/* 인터페이스
		 인터페이스는 상수와 추상 메서드를 멤버로 가질 수 있는 구조
		 인터페이스는 일반 메서드는 없고 모두 추상 메서드로만 구성
		 
		 -형식
		 interface 인터페이스 이름{
		 	public static final 타입 이름 = 값;
		 	public abstract 반환타입 메서드이름(매개변수);
		 }
		 
		 -구조
		 제어자를 생략하더라도 에러 발생 하지않음. 컴파일러에서 자동으로 추가하기 떄문
		 인터페이스는 상속 대신 구현(implements)이라는 표현을 사용.
		 인터페이스를 구현한 자손 클래스는 오버라이딩을 통해 인터페이스 내부의 추상 메서드를 구체적으로 구현화해야
		 오버라이딩을 할 때는 public 제어자를 붙이고 오버라이딩
		 인터페이스는 다중 구현을 통해 다른 프로그램의 다중상속과 같은 기능을 할 수 있음
		 
		 -인터페이스를 이용한 다형성
		 인터페이스 타입의 변수로 인터페이스를 구현한 클래스의 인스턴스를 참조할 수 있음
		 인터페이스를 메서드의 매개변수 타입으로 지정할 수 있음
		 인터페이스를 메서드의 리턴타입으로 지정할 수 있음
		 */
		
		/* 인터페이스의 장점
		 1) 개발 시간을 단축시킬 수 있음 -> 어느쪽의 작업 진행 여부와 상관없이 양쪽에서 동시에 개발 진행 가능
		 2) 표준화 가능 -> 보다 일관되고 정형화된 프로그램 개발의 가능
		 3) 서로 관계없는 클래스에 관계 부여
		 4) 독립적인 프로그래밍 가능
		 */
	}

}
